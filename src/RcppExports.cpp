// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// fast_add
S4 fast_add(S4 a, S4 b);
RcppExport SEXP _fluxcapacitor_fast_add(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_add(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_as_dgeMatrix
S4 fast_as_dgeMatrix(const Eigen::MatrixXd& x);
RcppExport SEXP _fluxcapacitor_fast_as_dgeMatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_as_dgeMatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_add2
S4 fast_add2(S4 a, S4 b);
RcppExport SEXP _fluxcapacitor_fast_add2(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_add2(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_kronecker
S4 fast_kronecker(S4 a, S4 b);
RcppExport SEXP _fluxcapacitor_fast_kronecker(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_kronecker(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_kronecker_sym
S4 fast_kronecker_sym(S4 a, S4 b);
RcppExport SEXP _fluxcapacitor_fast_kronecker_sym(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_kronecker_sym(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_add3
SEXP fast_add3(Rcpp::S4 a_, Rcpp::S4 b_);
RcppExport SEXP _fluxcapacitor_fast_add3(SEXP a_SEXP, SEXP b_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type a_(a_SEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type b_(b_SEXP);
    rcpp_result_gen = Rcpp::wrap(fast_add3(a_, b_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fluxcapacitor_fast_add", (DL_FUNC) &_fluxcapacitor_fast_add, 2},
    {"_fluxcapacitor_fast_as_dgeMatrix", (DL_FUNC) &_fluxcapacitor_fast_as_dgeMatrix, 1},
    {"_fluxcapacitor_fast_add2", (DL_FUNC) &_fluxcapacitor_fast_add2, 2},
    {"_fluxcapacitor_fast_kronecker", (DL_FUNC) &_fluxcapacitor_fast_kronecker, 2},
    {"_fluxcapacitor_fast_kronecker_sym", (DL_FUNC) &_fluxcapacitor_fast_kronecker_sym, 2},
    {"_fluxcapacitor_fast_add3", (DL_FUNC) &_fluxcapacitor_fast_add3, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fluxcapacitor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
